// Generated by view binder compiler. Do not edit!
package com.example.dormyhunt.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.dormyhunt.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TenantItemLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageButton ibDelete;

  @NonNull
  public final ImageButton ibEdit;

  @NonNull
  public final AppCompatButton textPayment;

  @NonNull
  public final TextView textRoom;

  @NonNull
  public final TextView textTenantName;

  private TenantItemLayoutBinding(@NonNull ConstraintLayout rootView, @NonNull ImageButton ibDelete,
      @NonNull ImageButton ibEdit, @NonNull AppCompatButton textPayment, @NonNull TextView textRoom,
      @NonNull TextView textTenantName) {
    this.rootView = rootView;
    this.ibDelete = ibDelete;
    this.ibEdit = ibEdit;
    this.textPayment = textPayment;
    this.textRoom = textRoom;
    this.textTenantName = textTenantName;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static TenantItemLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TenantItemLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.tenant_item_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TenantItemLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ibDelete;
      ImageButton ibDelete = ViewBindings.findChildViewById(rootView, id);
      if (ibDelete == null) {
        break missingId;
      }

      id = R.id.ibEdit;
      ImageButton ibEdit = ViewBindings.findChildViewById(rootView, id);
      if (ibEdit == null) {
        break missingId;
      }

      id = R.id.textPayment;
      AppCompatButton textPayment = ViewBindings.findChildViewById(rootView, id);
      if (textPayment == null) {
        break missingId;
      }

      id = R.id.textRoom;
      TextView textRoom = ViewBindings.findChildViewById(rootView, id);
      if (textRoom == null) {
        break missingId;
      }

      id = R.id.textTenantName;
      TextView textTenantName = ViewBindings.findChildViewById(rootView, id);
      if (textTenantName == null) {
        break missingId;
      }

      return new TenantItemLayoutBinding((ConstraintLayout) rootView, ibDelete, ibEdit, textPayment,
          textRoom, textTenantName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
